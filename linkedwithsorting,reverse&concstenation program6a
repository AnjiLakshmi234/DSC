#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void append(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;

    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }
    while (last->next != NULL) {
        last = last->next;
    }
    last->next = new_node;
}

void display(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

void sortList(struct Node* head) {
    struct Node* current = head;
    struct Node* index = NULL;
    int temp;

    if (head == NULL) {
        return;
    }
    while (current != NULL) {
        index = current->next;
        while (index != NULL) {
            if (current->data > index->data) {
                temp = current->data;
                current->data = index->data;
                index->data = temp;
            }
            index = index->next;
        }
        current = current->next;
    }
}

void reverseList(struct Node** head_ref) {
    struct Node* prev = NULL;
    struct Node* current = *head_ref;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head_ref = prev;
}

void concatenateLists(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL) {
        *head1 = head2;
        return;
    }
    struct Node* temp = *head1;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = head2;
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    int choice, value;

    do {
        printf("\nMenu:\n");
        printf("1. Append to List 1\n");
        printf("2. Display List 1\n");
        printf("3. Sort List 1\n");
        printf("4. Reverse List 1\n");
        printf("5. Append to List 2\n");
        printf("6. Display List 2\n");
        printf("7. Concatenate List 1 and List 2\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to append to List 1: ");
                scanf("%d", &value);
                append(&list1, value);
                break;
            case 2:
                printf("List 1: ");
                display(list1);
                break;
            case 3:
                sortList(list1);
                printf("Sorted List 1: ");
                display(list1);
                break;
            case 4:
                reverseList(&list1);
                printf("Reversed List 1: ");
                display(list1);
                break;
            case 5:
                printf("Enter value to append to List 2: ");
                scanf("%d", &value);
                append(&list2, value);
                break;
            case 6:
                printf("List 2: ");
                display(list2);
                break;
            case 7:
                concatenateLists(&list1, list2);
                printf("Concatenated List (List 1 + List 2): ");
                display(list1);
                break;
            case 8:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 8);

    return 0;
}
